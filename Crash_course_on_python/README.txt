#ALL PYTHON PROFRAMS GATHERING
##test1: 字符串的format应用 字符串的format应用 替换字符串末尾某个子串 
##test2: 给定一个文件名列表，我们要将所有扩展名为hpp的文件重命名为扩展名h, 为了做到这一点，我们要生成一个名为newfilenames的新列表，由新文件名组成。使用到目前为止所学的任何方法在代码中填空，比如for循环或列表理解
##test3: 让我们创建一个函数，将文本转换为拉丁文:一个简单的文本转换，它修改每个单词，将第一个字符移到末尾，并在末尾追加“ay”。例如，python以ythonpay结尾。
##test4: 在Linux系统中，文件的权限分为三组:对所有者、组和其他人的读、写和执行权限。这三个值都可以表示为每个权限的八进制数之和，4对应读，2对应写，1对应执行。或者，当没有授予权限时，可以使用字母r、w和x或-的字符串来编写它。例如:640对于所有者是读/写的，对于组是读的，对其他人没有权限;转换为字符串，它将是:"rw-r-----"
755对于所有者是读/写/执行，对于组和其他对象是读/执行;转换为字符串，它将是:"rwxr-xr-x"填写空格，使代码将八进制格式的权限转换为字符串格式
##test5: group_list函数接受一个组名和一个成员列表，并返回一个格式为:group_name: member1, member2，…例如,group_list(“g”,(“a”、“b”、“c”))返回“g: a、b、c”。填补这个函数中的空白来完成此操作。
##test6: guest_list函数读入包含每个派对客人的姓名、年龄和职业的元组列表，并为每个客人打印一句话“客人是X岁，以__身份工作”。
例如，guest_list(('Ken'， 30岁，"Chef")， ("Pat"， 35岁，" Lawyer ")， ('Amanda'， 25岁，"Engineer"))应该打印出来:Ken 30岁，是厨师。帕特35岁，是一名律师。
阿曼达25岁，是一名工程师。填补这个函数中的空白来完成此操作。
##test7: email_list函数接收一个字典，其中包含作为键的域名和作为值的用户列表。填空生成包含完整电子邮件地址的列表(例如:diana.prince@gmail.com)。
##test8: groups_per_user函数接收一个字典，其中包含组名和用户列表。用户可以属于多个组。填空返回一个字典，其中用户作为键，用户组的列表作为值。
##test9: 使用字典计算输入字符串中字母的出现频率。只计算字母，不计算空格、数字或标点符号。应该认为大写字母和小写字母是一样的。
例如,count_letters(“这是一个句子。”)应该返回{“t”:2,“h”:1、“我”:2,“s”:3,' ':1,“e”:3,“n”:2,“c”:1}。
##test10: 在python中手动对10个整数列表排序
##test11: 编写一个函数从unittest导入结果中提取IPv4地址，并验证泰语是否有效。该函数应该是有效的IPv4，如果不存在有效的，则为空字符串。
例如:" 1.1.1.1 is a valid IPv4 address" result: 1.1.1.1 "1.1.1.255" result: 1.1.1.255" 1.1.1.226 is an invalid IPv4 address" result:""
##Object_Oriented_Programming_V7.ipynb: 在本练习中，我们将创建几个类来模拟一个从外部接收连接的服务器，以及一个负载平衡器，以确保有足够的服务器来服务这些连接。
为了表示负责连接的服务器，我们将使用Server类。每个连接都用一个id表示，例如，它可以是连接到服务器的计算机的IP地址。对于我们的模拟，每个连接在服务器中创建随机量的负载，在1到10之间。
##machines_pool_event:Monitor which computer domains and users are online in the company




